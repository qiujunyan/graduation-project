
// prj1.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "opencv2/opencv.hpp"
#include "iostream"
#include <fstream>  
#include "time.h"
#include "math.h"

using namespace cv;
using namespace std;

class ImagePreprocess
{
private:
	int m_nExtSize = 10;														//2*extSize=局部极大值判断窗口大小
	int m_nDistance = 75;														//cluster时类别之间最大距离
	int m_nClusterCount = 0;													//cluster分类数
	int const m_nThreshold = 200;
public:
	IplImage* ScaleImg(IplImage *src, float fScale);							//缩放图像
	IplImage* CalInteg(IplImage *ScaleImage);									//图像积分
	IplImage* CS2(IplImage *CalIntegImage, int wndSize);						//显著性图计算2
	bool CalLocalMax(IplImage *CSImage, int rows, int columns);					//局部极大值判断
	int *MaxValCoord(IplImage *CSImage);										//选出前n个局部极大值像素点的坐标
	float CalDistance(IplImage *CSImage, int p1, int p2);						//距离求取函数
	vector<vector<Point>> cluster(IplImage *CSImage, int *coord);				//根据距离聚类
	vector<vector<Point>> drawGrid(IplImage *CSImage, vector<vector<Point>>point);
	IplImage* Otsu_fast(IplImage *clusterImage, vector<vector<Point>>point);		//大律法

};

IplImage* ImagePreprocess::ScaleImg(IplImage *src, float fScale)
{
	IplImage *dst = NULL;
	CvSize dstSize;																//Cvsize是矩形框的大小，单位是像素

	dstSize.width = int(src->width*fScale);
	dstSize.height = int(src->height*fScale);
	dst = cvCreateImage(dstSize, src->depth, src->nChannels);
	cvResize(src, dst, CV_INTER_NN);

	cvShowImage("dst", dst);
	return dst;
	cvReleaseImage(&dst);
	cvReleaseImage(&src);
}

IplImage* ImagePreprocess::CalInteg(IplImage *ScaleImage)
{
	IplImage *srcGray = cvCreateImage(cvGetSize(ScaleImage), 8, 1);
	IplImage *dst = cvCreateImage(cvGetSize(ScaleImage), IPL_DEPTH_32F, 1);

	cvCvtColor(ScaleImage, srcGray, CV_BGR2GRAY);

	int nw = dst->width;
	int nh = dst->height;
	CvScalar *srcPixel = new CvScalar[nw*nh];							//原始图像的像素值
	CvScalar *dstPixel = new CvScalar[nw*nh];							//目标图像的像素值                    

	for (int i = 0; i < nh; i++)
		for (int j = 0; j < nw; j++)
			srcPixel[i*nw + j] = cvGet2D(ScaleImage, i, j);

	CvScalar *columnSum = new CvScalar[nw];								//columnSum[j]表示第j列前n行的像素值积分
	columnSum[0].val[0] = srcPixel[0].val[0];
	dstPixel[0].val[0] = columnSum[0].val[0];
	cvSet2D(dst, 0, 0, dstPixel[0]);

	//第一行的像素值积分
	for (int j = 1; j < nw; j++)
	{
		columnSum[j].val[0] = srcPixel[j].val[0];
		dstPixel[j].val[0] = columnSum[j].val[0];
		dstPixel[j].val[0] += dstPixel[j - 1].val[0];
		cvSet2D(dst, 0, j, dstPixel[0 * nw + j]);
	}


	for (int i = 1; i < nh; i++)
	{
		//第一列像素积分
		columnSum[0].val[0] += srcPixel[i*nw].val[0];
		dstPixel[i*nw].val[0] = columnSum[0].val[0];
		cvSet2D(dst, i, 0, dstPixel[i * nw]);
		//其他像素值积分
		for (int j = 1; j < nw; j++)
		{
			columnSum[j].val[0] += srcPixel[i*nw + j].val[0];
			dstPixel[i*nw + j].val[0] = dstPixel[i*nw + j - 1].val[0] + columnSum[j].val[0];
			cvSet2D(dst, i, j, dstPixel[i * nw + j]);
		}
	}

	return dst;
	delete[]srcPixel;
	delete[]dstPixel;
	delete[]columnSum;
	cvReleaseImage(&srcGray);
	cvReleaseImage(&dst);
}



IplImage* ImagePreprocess::CS2(IplImage *CalIntgImage, int wndSize)												//边缘检测
{
	int w = CalIntgImage->width;
	int h = CalIntgImage->height;
	int n = w*h;
	double pixel_LR;
	double pixel_UP;
	int num = wndSize*wndSize * 2;

	IplImage *dst = cvCreateImage(cvGetSize(CalIntgImage), 8, 1);
	int *srcPixel = new int[n];
	CvScalar *dstPixel = new CvScalar[n];

	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++)
			srcPixel[i*w + j] = ((float *)(CalIntgImage->imageData + i*CalIntgImage->widthStep))[j];


	for (int i = wndSize + 1; i < (h - wndSize); i++)
	{
		for (int j = wndSize + 1; j < (w - wndSize); j++)
		{
			int pos_i = i + wndSize;
			int pos_j = j + wndSize;
			int pos_ii = i - wndSize;
			int pos_jj = j - wndSize;
			pixel_LR = abs(srcPixel[pos_i*w + pos_j] - srcPixel[pos_i*w + j] - (srcPixel[pos_i*w + j - 1] - srcPixel[pos_i*w + pos_jj - 1])
				- (srcPixel[(pos_ii - 1)*w + pos_j] - srcPixel[(pos_ii - 1)*w + j] - (srcPixel[(pos_ii - 1)*w + j - 1] - srcPixel[(pos_ii - 1)*w + pos_jj - 1]))) / num;
			pixel_UP = abs(srcPixel[pos_i*w + pos_j] - srcPixel[i*w + pos_j] - (srcPixel[(i - 1)*w + pos_j] - srcPixel[(pos_ii - 1)*w + pos_j])
				- (srcPixel[pos_i*w + (pos_jj - 1)] - srcPixel[i*w + (pos_jj - 1)] - (srcPixel[(i - 1)*w + (pos_jj - 1)] - srcPixel[(pos_ii - 1)*w + (pos_jj - 1)]))) / num;

			dstPixel[i*w + j].val[0] = 3 * (((pixel_LR > pixel_UP) ? pixel_LR : pixel_UP));
			cvSet2D(dst, i, j, dstPixel[i*w + j]);
		}
	}




	wndSize = wndSize;
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
			if (i <= wndSize || i >= h - wndSize || j <= wndSize || j >= w - wndSize)
				cvSet2D(dst, i, j, cvScalar(0, 0, 0));
	}

	return dst;
	delete[] srcPixel;
	delete[] dstPixel;
	cvReleaseImage(&dst);
}


bool ImagePreprocess::CalLocalMax(IplImage *CSImage, int x, int y)		//x,y表示要判断坐标点的横、纵坐标;窗口大小为(2*extSize+1)*(2*extSize+1)
{
	int w = CSImage->width;
	int h = CSImage->height;

	int x_begin = (x > m_nExtSize ? x - m_nExtSize : 0);
	int x_end = (x + m_nExtSize < h ? x + m_nExtSize : h - 1);
	int y_begin = (y > m_nExtSize ? y - m_nExtSize : 0);
	int y_end = (y + m_nExtSize < w ? m_nExtSize + y : w - 1);
	int wndSize = (x_end - x_begin + 1)*(y_end - y_begin + 1);					//窗口像素点数

	bool State;
	int Count = 0;
	int pixel_xy = ((uchar *)(CSImage->imageData + x*CSImage->widthStep))[y];
	int *pixel = new int[wndSize];

	if (pixel_xy < m_nThreshold)
		State = false;
	else
	{
		for (int i = x_begin; i <= x_end; i++)									//考虑到像素点在图像边缘
			for (int j = y_begin; j <= y_end; j++)
			{
				pixel[Count] = ((uchar *)(CSImage->imageData + i*CSImage->widthStep))[j];
				if (pixel_xy < pixel[Count])
					break;
				Count++;
			}
		if (Count >= wndSize)
			State = true;
		else
			State = false;
	}
	return State;
	delete[]pixel;
}

int *ImagePreprocess::MaxValCoord(IplImage *CSImage)
{
	int w = CSImage->width;
	int h = CSImage->height;
	int *coord = new int[w*h];													//存储局部极大值坐标

	coord[0] = 0;
	int num = 1;
	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			if (CalLocalMax(CSImage, i, j))
			{
				coord[num] = i*w + j;
				num++;
				//cvSet2D(CSImage, i, j, cvScalar(255, 255, 255));
			}
			else
				cvSet2D(CSImage, i, j, cvScalar(0, 0, 0));
		}
	}
	coord[0] = num;
	return coord;
	delete[]coord;
}

float ImagePreprocess::CalDistance(IplImage *CSImage, int p1, int p2)
{
	int w = CSImage->width;
	int p1_y = p1%w;
	int p1_x = p1 / w;
	int p2_y = p2%w;
	int p2_x = p2 / w;
	float distance;
	distance = sqrt(float(pow(p1_x - p2_x, 2) + pow(p1_y - p2_y, 2)));

	return distance;
}

vector<vector<Point>> ImagePreprocess::cluster(IplImage *CSImage, int *coord)
{
	int sampleCount = coord[0];
	m_nClusterCount = sampleCount;

	int w = CSImage->width;
	int h = CSImage->height;

	vector<Point> pointTemp(sampleCount);
	vector<vector<Point>> points(20, vector<Point>(sampleCount));//数组所占空间越大，耗时越长
	vector<Point>centerPoint(sampleCount);

	int clusterNum = int(sampleCount / 10);

	int nDistance;
	int label = 0;
	for (int i = 1; i < sampleCount; i++)
	{
		int countTemp = 2;
		if (coord[i] != -1)
		{
			points[label][1].x = coord[i] / w;
			points[label][1].y = coord[i] % w;
			centerPoint[label].x = coord[i] / w;
			centerPoint[label].y = coord[i] % w;
			for (int j = i + 1; j < sampleCount; j++)
			{
				if (coord[j] != -1)
				{
					nDistance = CalDistance(CSImage, centerPoint[label].x*w + centerPoint[label].y, coord[j]);//j+1?
					if (nDistance < m_nDistance)
					{
						points[label][countTemp].x = coord[j] / w;
						points[label][countTemp].y = coord[j] % w;
						centerPoint[label].x = int((centerPoint[label].x* (countTemp - 1) + coord[j] / w) / countTemp);	//更新点集中心
						centerPoint[label].y = int((centerPoint[label].y* (countTemp - 1) + coord[j] % w) / countTemp);
						countTemp++;
						coord[j] = -1;
						m_nClusterCount--;
					}
				}
			}
			points[label][0].x = countTemp;
			if (points[label][0].x < ((clusterNum > 5) ? clusterNum : 5))//筛除点数较小的点集
			{
				centerPoint[label].x = -1;
				centerPoint[label].y = -1;
				m_nClusterCount--;
			}
			else
				label++;
		}
	}
	m_nClusterCount--;
	return points;
	centerPoint.clear();
	points.clear();
}

vector<vector<Point>> ImagePreprocess::drawGrid(IplImage *CSImage, vector<vector<Point>>point)
{
	Mat srcMat;
	srcMat = cvarrToMat(CSImage);
	vector<vector<Point>>fPoint(m_nClusterCount, vector<Point>(4));				//找出四个角点
	int delta = 2;
	for (int label = 0; label < m_nClusterCount; label++)
	{
		int delta = 0;
		int x_min = point[label][1].x - delta;
		int x_max = point[label][1].x + delta;
		int y_min = point[label][1].y - delta;
		int y_max = point[label][1].y + delta;
		for (int i = 2; i < point[label][0].x; i++)								// point[label][0].x代表label类别的点集的数量
		{
			if (point[label][i].x < x_min&&point[label][i].x != 0)
				x_min = point[label][i].x;
			else if (point[label][i].x > x_max)
				x_max = point[label][i].x;

			if (point[label][i].y < y_min&&point[label][i].y != 0)
				y_min = point[label][i].y;
			else if (point[label][i].y > y_max)
				y_max = point[label][i].y;
		}
		fPoint[label][0].y = x_min;
		fPoint[label][0].x = y_min;

		fPoint[label][1].y = x_min;
		fPoint[label][1].x = y_max;

		fPoint[label][2].y = x_max;
		fPoint[label][2].x = y_max;

		fPoint[label][3].y = x_max;
		fPoint[label][3].x = y_min;
		//cout << label << ":[" << fPoint[label][0].x << "," << fPoint[label][0].y << "],[" << fPoint[label][1].x << "," << fPoint[label][1].y << "]" << endl;
		for(int i=0;i<4;i++)
			line(srcMat, fPoint[label][i], fPoint[label][(i+1)%4], Scalar(255, 255, 255), 1, 16);
	}

	imshow("ImagePreprocess", srcMat);
	return fPoint;
	fPoint.clear();
}




IplImage* ImagePreprocess::Otsu_fast(IplImage *ScaleImage, vector<vector<Point>>point)
{
	//图像转化成灰度图                                                                            
	IplImage *grayImg = cvCreateImage(cvSize(ScaleImage->width, ScaleImage->height), IPL_DEPTH_8U, 1);
	cvCvtColor(ScaleImage, grayImg, CV_BGR2GRAY);
	Mat grayImgMat = cvarrToMat(grayImg);
	int label, i, j;

	for (label = 0; label < m_nClusterCount; label++)
	{
		bool Ctrl = true;
		if (Ctrl)
		{
			//设置ROI及图片预处理
			Rect rect(point[label][0].x, point[label][0].y, point[label][2].x - point[label][0].x, point[label][2].y - point[label][0].y);
			Mat grayImgROI(grayImgMat, rect);
			int size = grayImgROI.rows*grayImgROI.cols;
			int count[256] = {0},pixel,maxPixel=0; 
			for (i = 0; i < grayImgROI.rows; i++)
			{
				uchar *p = grayImgROI.ptr<uchar>(i);
				for (j = 0; j < grayImgROI.cols; j++)
					if (p[j] > maxPixel)
						maxPixel = p[j];
			}

			for (i = 0; i < grayImgROI.rows; i++)
			{
				uchar *p = grayImgROI.ptr<uchar>(i);
				for (j = 0; j < grayImgROI.cols; j++)
				{
					p[j] = int(pow(p[j], 4) / float(pow(maxPixel, 3)));
					pixel = p[j];
					count[pixel]++;
				}
			}


			double mu = 0, scale = 1. / (size);//mu为图像灰度平均值
			for (i = 0; i < 256; i++)
				mu += i*(double)count[i];
			mu *= scale;
			double mu1 = 0, q1 = 0;
			double max_sigma = 0, max_val = 0;
			for (i = 0; i < 256; i++)
			{
				double p_i, q2, mu2, sigma;

				p_i = count[i] * scale;
				mu1 *= q1;
				q1 += p_i;
				q2 = 1. - q1;

				if (std::min(q1, q2) < FLT_EPSILON || std::max(q1, q2) > 1. - FLT_EPSILON)
					continue;

				mu1 = (mu1 + i*p_i) / q1;
				mu2 = (mu - q1*mu1) / q2;
				sigma = q1*q2*(mu1 - mu2)*(mu1 - mu2);
				if (sigma > max_sigma)
				{
					max_sigma = sigma;
					max_val = i;
				}
			}
			int nThreshold = max_val;

			//腐蚀膨胀
			int kernelSize = 2;
			Mat element = getStructuringElement(MORPH_RECT, Size(kernelSize, kernelSize));
			erode(grayImgROI, grayImgROI, element);
			dilate(grayImgROI, grayImgROI, element);
			threshold(grayImgROI, grayImgROI, nThreshold, 255, 0);

			//提取目标图像轮廓
			vector<vector<Point>> contours;
			vector<Vec4i> hierarchy;
			findContours(grayImgROI, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_NONE);
			grayImgROI = Mat::zeros(rect.size(), CV_8UC1);
			//drawContours(grayImgROI, contours, -1, Scalar(255, 255, 255));

			//绘制最小外接矩形
			vector<RotatedRect> box(contours.size());
			Point2f rect2[4];
			for (i = 0; i<contours.size(); i++)
			{
					box[i] = minAreaRect(Mat(contours[i]));  //计算每个轮廓最小外接矩形
					box[i].points(rect2);  //把最小外接矩形四个端点复制给rect数组
					for (int j = 0; j<4; j++)
						line(grayImgROI, rect2[j], rect2[(j + 1) % 4], Scalar(255), 1, 4);  //绘制最小外接矩形每条边
			}
		}
	}
	cvShowImage("binaryImage", grayImg);
	cvReleaseImage(&grayImg);
	return grayImg;
}


int main()
{
	time_t begin, end;
	time_t begin1, end1;
	time_t begin2, end2;
	time_t begin3, end3;
	time_t begin4, end4;
	time_t begin5, end5;
	time_t begin6, end6;
	time_t begin7, end7;
	begin = clock();


	ImagePreprocess myClass;
	IplImage *src = cvLoadImage("E:\\毕业设计\\图像\\quan\\c0.jpg");
	//IplImage *src = cvLoadImage("C:\\Users\\Qiujunyan\\Desktop\\毕业设计\\毕业设计\\212fortest\\s0.jpg");
	vector<vector<Point>>point(100, vector<Point>(100));
	IplImage *ScaleImage;
	IplImage *CS2Image;
	int *coord = new int[1000];

	begin1 = clock();
	ScaleImage = myClass.ScaleImg(src, 0.5);
	end1 = clock();
	cout << "clock1缩放图像:" << end1 - begin1 << endl;

	begin2 = clock();
	IplImage *CalIntgImage = cvCreateImage(cvGetSize(ScaleImage), 32, 1);
	CalIntgImage = myClass.CalInteg(ScaleImage);
	end2 = clock();
	cout << "clock2积分图像：" << end2 - begin2 << endl;

	begin3 = clock();
	CS2Image = myClass.CS2(CalIntgImage, 1);
	end3 = clock();
	cout << "clock3显著性图:" << end3 - begin3 << endl;
	cvShowImage("CS2Image", CS2Image);

	begin4 = clock();
	coord = myClass.MaxValCoord(CS2Image);
	end4 = clock();
	cout << "clock4局部极大值抑制:" << end4 - begin4 << endl;

	begin5 = clock();
	point = myClass.cluster(CS2Image, coord);
	end5 = clock();
	cout << "clock5聚类:" << end5 - begin5 << endl;

	begin6 = clock();
	vector<vector<Point>>angularPoint = myClass.drawGrid(CS2Image, point);
	end6 = clock();
	cout << "clock6画图:" << end6 - begin6 << endl;


	begin7 = clock();
	myClass.Otsu_fast(ScaleImage, angularPoint);
	end7 = clock();
	cout << "clock7:大律法" << end7 - begin7 << endl;

	end = clock();

	cout << "clock:" << end - begin << endl;

	cvWaitKey();


	return 0;
}


